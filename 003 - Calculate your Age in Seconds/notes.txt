/* 
 * Given an instantiation of a class: class is type, and object is the variable.
 * Access specifiers: private, public, protected.
 *  priv: members of class are accessible only from within other members of the same class.
 *  protected: members accessible from other members of the same class, but also from members of their derived classes.
 *  public: open season as members are accessible from anywhere the object is visible.

 - members are all private by default.
 - data members are variables that a class has!
 - object_name = shortform access of a variable's members; no need to call full class name.
 - class_name = name of the class; used to instantiate class.
 - members of a class are grouped by access identifiers.

 - constructor is just the classname with parentheses; treated as a regular function without a return type.
 - member functions are identified as part of a class via ::. 
   - e.g. Date::date --> Class Line "has"(where :: == "has") function "Line";
   - e.g. Date::setDate(x,y,z);

 - "this->" keyword of a member function implies accessing a member of current object.
  - Accessing members in a member_function is also allowed; despite being disconnected and "outside" the class definition.

- every month has a defined number of days, except February.
  - February has either 28 or 29 days, depending on whether it's a leap year.
    If leap_year -> 29 days long.

- A switch statement consists of the switch condition, then a series of cases that each end with break -
  usually.
  e.g. 
  switch (color)
    {
        case COLOR_BLACK:
            std::cout << "Black";
            break;
        case COLOR_WHITE:
            std::cout << "White";
            break;
        default:
            doSomethinig();
            break;
    }
  
*/

- Checking if a year was a leap year gave me way too much trouble. Why?
    bool Birthday::isLeapYear(int year)
    {
    bool isLeapYear = false;

    if (year % 4 == 0 && year 100 != 0 ||
        year % 400 == 0)
    {
        isLeapYear = true;
    }

    return isLeapYear;
    }
    
    Need to take a look at this control structure and see if it's correct.

- "this" keyword is ALWAYS A POINTER; which makes sense, because why would we create a second object? 

-   Printing for testing.
    std::cout << "daysInCurrentYear: " << daysInCurrentYear << std::endl;
    std::cout << "daysPriorToCurrentYear: " << daysPriorToCurrentYear << std::endl;
    std::cout << "daysElapsedInLife: " << daysElapsedInLife << std::endl;
    std::cout << "secondsElapsedInLife: " << secondsElapsedInLife << std::endl;
========================================================================================================================================================================
TODO:
- implement ui to prompt user for birthday
- giveAgeInSeconds()
- See if our use of data members instead of newly assigned variables is ideal usage -- reference completed code on github.
- refactor: two arrays to give #days associated with each month number;
            Perform a look up on each array to determine # days associated with current month.
- 


========================================================================================================================================================================
- Q: How should we plan out the classes next time?
- Q: Should class design be the first thing we look at next time?
- Q: What is an ideal class structure for ageInSeconds app?
    - Look up how people divided it up into classes. -- Github.